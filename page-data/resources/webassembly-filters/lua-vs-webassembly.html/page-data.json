{"componentChunkName":"component---src-templates-resource-single-js","path":"/resources/webassembly-filters/lua-vs-webassembly.html","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Lua vs WebAssembly\",\n  \"thumbnail\": \"./lua-wasm.svg\",\n  \"darkthumbnail\": \"./lua-wasm.svg\",\n  \"date\": \"2021-10-28 10:30:05 -0530\",\n  \"category\": \"WebAssembly Filters\",\n  \"type\": \"Article\",\n  \"technology\": \"WebAssembly\",\n  \"tags\": [\"WebAssembly\", \"Envoy\"],\n  \"published\": true,\n  \"resource\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ResourcesWrapper, {\n    mdxType: \"ResourcesWrapper\"\n  }, mdx(\"div\", {\n    className: \"intro\"\n  }, mdx(\"p\", null, \"Learn more about WebAssembly's use within service mesh data planes in \", mdx(Link, {\n    className: \"blog\",\n    to: \"/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition\",\n    mdxType: \"Link\"\n  }, \"The Enterprise Path to Service Mesh Archictures (2nd Edition)\"), \" -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.\")), mdx(\"h3\", null, \"The Power of the Data Plane\"), mdx(\"p\", null, \"Operators benefit from control planes because they provide much-needed element management. Data planes require control planes to apply service mesh-specific use cases to their fleet of service proxies. A control plane performs activities like configuration management, telemetry collecting, infrastructure-centric authorization, identity, etc. However, the service proxy is a massive source of power for them. Users frequently require customizing the chain of traffic filters (modules) that service proxies employ to perform much of their heavy lifting. Different technologies are used to provide data plane extensibility, and consequently, additional custom data plane intelligence, including:\"), mdx(\"ul\", null, mdx(\"li\", null, \"Lua - a scripting language for execution inside a Just-In-Time compiler, LuaJIT.\"), mdx(\"li\", null, \"WebAssembly (WASM) - a virtual stack machine as a compilation target for different languages to use as an execution environment.\")), mdx(\"h3\", null, \"Lua and WebAssembly\"), mdx(\"p\", null, \"People are discussing the merits of using a WebAssembly runtime since the introduction of WASM into service meshes. A\\xA0 Lua runtime\\xA0can be as little as 4 kb, with LuaJIT being surprisingly fast, having a runtime of only ~200 kb.\"), mdx(\"p\", null, \"The WebAssembly loader, not the runtime, is the source of complexity for the host software. When comparing the two, how do you weigh GCC or LLVM in terms of making optimized C or C++ faster or slower than LuaJIT?\"), mdx(\"p\", null, \"The complexity of a WebAssembly runtime stems from the fact that it contains arch-specific optimizers as well as an Intermediate Representation to machine code translation stage that would usually be executed inside GCC or LLVM. Machine code can be created once and then cached on non-volatile storage until the input WASM file's hash changes (like the extracted contents of a Zip file). Since WASM has a similar approach to sandboxing (making the language/bytecode unable to describe accessing resources outside of what is granted), the result is lighter than Lua once the machine code is generated. However, WASM's compiled machine code does not require a garbage collector or JIT engine.\"), mdx(\"p\", null, \"WebAssembly follows the same flat, garbage-collected memory model as malloc and free. Suppose you want a garbage collector in a WebAssembly application. In that case, you can either compile it to WebAssembly and run it inside the sandbox or wait for extensions currently developing, such as \\\"opaque reference types,\\\" which allows WebAssembly applications to interact with objects managed by a Garbage Collector outside the sandbox.\"), mdx(\"h3\", null, \"NGINX and Lua\"), mdx(\"p\", null, \"NGINX allows you to write\\xA0dynamic modules that can be loaded at runtime based on\\xA0configuration files. By modifying the configuration files and reloading NGINX, these modules can be unloaded. NGINX enables you to use Lua to embed custom logic into dynamic modules.\"), mdx(\"p\", null, \"Lua is a lightweight, embeddable scripting language that supports procedural, functional, and object-oriented programming. Lua is dynamically typed, and runs by interpreting bytecode with a register-based virtual machine.\"), mdx(\"p\", null, \"NGINX provides the ability to integrate dynamic Lua scripts using the ngx_lua module. Using NGINX with ngx_lua helps you offload logic from your services and hand their concerns off to an intelligent data plane. Leveraging NGINX's subrequests, the ngx_lua module allows the integration of Lua threads (or coroutines into the NGINX event model. Instead of passing logic to an upstream server, the Lua script can inspect and process service traffic. ngx_lua modules can be chained to be invoked at different phases of NGINX request processing.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Lua vs WebAssembly","subtitle":null,"date":"October 28th, 2021","author":null,"category":"WebAssembly Filters","tags":["WebAssembly","Envoy"],"description":null,"thumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/e618b16625c039ca1840620451fc92dd/lua-wasm.svg"}},"fields":{"slug":"/resources/webassembly-filters/lua-vs-webassembly"}}},"pageContext":{"slug":"/resources/webassembly-filters/lua-vs-webassembly"}},"staticQueryHashes":["1376321266","1485533831","2848499768","4047814605"],"matchPath":"/resources/webassembly-filters/lua-vs-webassembly"}
{"componentChunkName":"component---src-templates-resource-single-js","path":"/resources/service-mesh/istio-virtual-service.html","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Istio Virtual Service\",\n  \"thumbnail\": \"../../../../assets/images/service-mesh-icons/istio.svg\",\n  \"darkthumbnail\": \"../../../../assets/images/service-mesh-icons/istio.svg\",\n  \"date\": \"2022-06-16 10:30:05 -0530\",\n  \"type\": \"Article\",\n  \"category\": \"Service Mesh\",\n  \"mesh\": \"Istio\",\n  \"technology\": \"Kubernetes\",\n  \"tags\": [\"Istio\", \"Envoy\"],\n  \"featured\": false,\n  \"published\": true,\n  \"resource\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ResourcesWrapper, {\n    mdxType: \"ResourcesWrapper\"\n  }, mdx(\"p\", null, \"Istio Virtual Service defines a set of traffic routing rules to apply when host is addressed. Each routing rule defines standards for the traffic of a specific protocol. If the traffic is matched, then it is sent to a named destination service defined in the registry.\"), mdx(\"p\", null, \"The source of traffic can also be matched within a routing rule that allows routing to be customized for every specific client context.\"), mdx(\"div\", {\n    className: \"fact-left\"\n  }, mdx(\"p\", null, \"The below example on Kubernetes routes all HTTP traffic by default to pods of the reviews service with the label \\u201Cversion: v1\\u201D. Additionally, HTTP requests with path starting with /wpcatalog/ or /consumercatalog/ will be rewritten to /newcatalog and sent to the pods with label \\u201Cversion: v2\\u201D.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apiVersion: networking.istio.io/v1alpha3\\nkind: VirtualService\\nmetadata:\\n  name: reviews-route\\nspec:\\n  hosts:\\n  - reviews.prod.svc.cluster.local\\n  http:\\n  - name: \\\"reviews-v2-routes\\\"\\n    match:\\n    - uri:\\n        prefix: \\\"/wpcatalog\\\"\\n    - uri:\\n        prefix: \\\"/consumercatalog\\\"\\n    rewrite:\\n      uri: \\\"/newcatalog\\\"\\n    route:\\n    - destination:\\n        host: reviews.prod.svc.cluster.local\\n        subset: v2\\n  - name: \\\"reviews-v1-route\\\"\\n    route:\\n    - destination:\\n        host: reviews.prod.svc.cluster.local\\n        subset: v1\\n\\n\")), mdx(\"h2\", null, \"Virtual Service Configuration Affecting Traffic Routing \"), mdx(\"p\", null, \"A single Virtual Service can be used to describe all the traffic properties of the hosts, including those for multiple HTTP and TCP ports.\"), mdx(\"div\", null, mdx(\"h3\", null, \"Hosts\"), mdx(\"ul\", null, mdx(\"li\", null, \"The application traffic created by hosts, clients, servers, and applications that use the network as a transport is contained in the physical network data plane (also known as the forwarding plane). As a result, data plane traffic should never have source or destination IP addresses that are assigned to network elements like routers and switches; instead, it should be originated from and delivered to end devices like PCs and servers. To forward data plane traffic as swiftly as possible, routers and switches use hardware chips called application-specific integrated circuits (ASICs). A forwarding information base is referenced by the physical networking data plane (FIB).\"), mdx(\"li\", null, \"The destination hosts to which traffic is being sent it could be a DNS name with wildcard prefix or an IP address depending on the platform.\"))), mdx(\"div\", null, mdx(\"h3\", null, \"Gateways\"), mdx(\"ul\", null, mdx(\"li\", null, \"The names of gateways and sidecars that should apply all these routes. Gateways in other namespaces may be referred to by \", mdx(\"code\", null, \" gateway namespace>/gateway name \"), \"; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService\\u2019s namespace.\"))), mdx(\"div\", null, mdx(\"h3\", null, \"HTTP\"), mdx(\"ul\", null, mdx(\"li\", null, \"An ordered list of route rules for HTTP traffic. The HTTP routes will be applied to the platform service ports named \", mdx(\"code\", null, \"\\u2018http-\\u2019/\\u2018http2-\\u2019/\\u2018grpc-*\\u2019, gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS \"), \" and service entry ports using HTTP/HTTP2/GRPC protocols.\"), mdx(\"li\", null, \"The first rule is matching an incoming request which is used.\"))), mdx(\"div\", null, mdx(\"h3\", null, \"TCP\"), mdx(\"ul\", null, mdx(\"li\", null, \"An ordered list of all the routing rules for opaque TCP traffic. TCP routes will be applied to any of the port which is not a HTTP or TLS port.\"))), mdx(\"div\", null, mdx(\"h3\", null, \"ExportTo\"), mdx(\"ul\", null, mdx(\"li\", null, \"Exporting a virtual service allows it to be used by the sidecars and the gateways defined in other namespaces.\"), mdx(\"li\", null, \"If no namespaces are specified then the virtual service is exported to all namespaces by default.\"))), mdx(\"h2\", null, \"Destination\"), mdx(\"p\", null, \"A destination indicates that the network addressable service to which the request/connection will be sent. A DestinationRule defines policies that apply to traffic intended for a service after routing has occurred.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apiVersion: networking.istio.io/v1alpha3\\nkind: DestinationRule\\nmetadata:\\n  name: reviews-destination\\nspec:\\n  host: reviews.prod.svc.cluster.local\\n  subsets:\\n  - name: v1\\n    labels:\\n      version: v1\\n  - name: v2\\n    labels:\\n      version: v2\\n\\n\")), mdx(\"div\", {\n    className: \"fact-left\"\n  }, mdx(\"p\", null, \"A version of the route destination is identified with a reference to a named service subset which should be declared in a corresponding DestinationRule.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Istio Virtual Service","subtitle":null,"date":"June 16th, 2022","author":null,"category":"Service Mesh","tags":["Istio","Envoy"],"description":null,"thumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"}},"fields":{"slug":"/resources/service-mesh/istio-virtual-service"}}},"pageContext":{"slug":"/resources/service-mesh/istio-virtual-service"}},"staticQueryHashes":["1376321266","1485533831","2848499768","4047814605"],"matchPath":"/resources/service-mesh/istio-virtual-service"}